name: 'fastlane'
description: 'Runs fastlane ci for ios platformwith target'
inputs:
  environment:
    description: "According .env file provided in fastlane folder, usually one of [local, dev, staging, prod]"
    required: true
  target:
    description: "Build target declared in Fastfile, usually one of [build, release]"
    required: true
  # Optional
  ruby_version:
    required: false
    default: '3.0'
  bundler_version:
    description: Option for 'gem install` command
    required: false
    default: '2.2.16'
  # iOS
  certificate:
    description: "Certificate for ios sign"
    required: false
    default: ""
  appstore_key:
    description: "Appstore connect key for uploading to testflight/appstore"
    required: false
    default: ''
  appstore_key_id:
    description: "Appstore connect key id for uploading to testflight/appstore"
    required: false
    default: ''
  appstore_key_issuer:
    description: "Appstore connect key issue for uploading to testflight/appstore"
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    # Setup ruby on github hosted machines, step fails on self-hosted macjenkins
    - name: Setup ruby
      if: ${{ runner.name == 'Hosted Agent' }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby_version }}
        bundler-cache: true
    # Setup dependencies for fastlane package from Gemfile
    - name: Setup dependencies
      shell: bash
      run: |
        gem install bundler:${{ inputs.bundler_version }}
        bundle install --jobs 4 --retry 3
    # "Populates 'ci' keychain with provided external cert for code sign, see more: https://blog.codemagic.io/how-to-code-sign-publish-ios-apps/"
    - name: Update ci keychain for iOS
      if: ${{ inputs.certificate != ''}}
      shell: bash
      run: |
        echo -n "${{ inputs.certificate }}" | base64 --decode > fastlane/cert.p12
        bundle exec fastlane ios update_keychain
    # "Provides appstore connect api key, see more: https://appstoreconnect.apple.com/access/api"
    - name: Provide appstore key
      if: ${{ inputs.appstore_key != ''}}
      shell: bash
      run: |
        [[ "${{ inputs.appstore_key_id }}" ]] || { echo "appstore_key_id input is empty" ; exit 1; }
        [[ "${{ inputs.appstore_key_issuer }}" ]] || { echo "appstore_key_issuer input is empty" ; exit 1; }
        echo -n "${{ inputs.appstore_key }}" > fastlane/AuthKey.p8
        echo "APP_STORE_CONNECT_API_KEY_KEY_FILEPATH=fastlane/AuthKey.p8" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_KEY_ID=${{ inputs.appstore_key_id }}" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=${{ inputs.appstore_key_issuer }}" >> $GITHUB_ENV
    # Execute lane from Fastfile
    - name: Execute fastlane target
      shell: bash
      run: bundle exec fastlane ios ${{ inputs.target }} --env ${{ inputs.environment }}
    # Remove sensitive data
    - name: Action cleanup
      shell: bash
      run: rm fastlane/*.p8 || true; rm fastlane/*.p12 || true
