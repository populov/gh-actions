#!/usr/bin/env bash


# Script provides processing all csproj in current directories and subdirs.
# It uses json from stdin that can be generated by semver
# Requires yq version 4+
# Example usage:
# semver | process_dotnet


verify_yq(){
    if ! command -v yq >/dev/null; then
        printf "yq not present in system/path\nget it here https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
        exit 1
    fi
    if [[ ! $(yq -V) =~ v4\. ]]; then
        printf "yq version 4+ required. https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
        exit 1
    fi
}

process_projectfile(){
    [[ -z $1 ]] && printf "No path for projectfile" && return 1
    printf "Processing %s:\n" "$1"
    printf "AssemblyVersion "
    yq -o xml -p xml -i ".Project.PropertyGroup.AssemblyVersion=$ASSEMBLY_SEMVER" "$1"
    printf "[updated];\n"
    printf "FileVersion "
    yq -o xml -p xml -i ".Project.PropertyGroup.FileVersion=$ASSEMBLY_SEMVER" "$1"
    printf "[updated];\n"
    printf "InformationalVersion "
    yq -o xml -p xml -i ".Project.PropertyGroup.InformationalVersion=$INFORM_VERSION" "$1"
    printf "[updated];\n"
    printf "Version "
    yq -o xml -p xml -i ".Project.PropertyGroup.Version=$SEMVER" "$1"
    printf "[updated];\n"
  }

verify_yq

JSON=$(cat -)
if [[ -n $JSON ]]; then
    if echo "$JSON" | yq 'true' -o=json - > /dev/null; then
        ASSEMBLY_SEMVER=$(echo "$JSON" | yq -o=json .AssemblySemVer )
        INFORM_VERSION=$(echo "$JSON" | yq -o=json .InformationalVersion )
        SEMVER=$(echo "$JSON" | yq -o=json .SemVer )
        for name in ASSEMBLY_SEMVER INFORM_VERSION SEMVER; do
            if [[ "${!name}" = "null" ]]; then
                echo "Wrong input, field $name not set!"
                exit 1
            fi
        done
        printf "Starting processing csproj files with:\nASSEMBLY_SEMVER=%s\nINFORM_VERSION=%s\nSEMVER=%s\n" "$ASSEMBLY_SEMVER" "$INFORM_VERSION" "$SEMVER"
        export ASSEMBLY_SEMVER INFORM_VERSION SEMVER
        export -f process_projectfile
        find . -type f -name "*.csproj" -exec bash -c "process_projectfile \"{}\"" \;
    else
        printf "Non valid json input"
        exit 1
    fi
else
    printf "Empty input"
    exit 1
fi
