#!/usr/bin/env bash

# Script provides processing all csproj in current directories and subdirs.
# It uses json from stdin that can be generated by semver
# Requires xmlstarlet version 1.6.1
# Example usage:
# semver | process_dotnet

process_projectfile(){
    [[ -z $1 ]] && printf "No path for projectfile" && return 1
    printf "Processing %s:\n" "$1"
    printf "AssemblyVersion "
    xmlstarlet ed -O -L -s "/Project/PropertyGroup[1]" -t elem -n AssemblyVersion -v $ASSEMBLY_SEMVER "$1"
    printf "[updated];\n"
    printf "FileVersion "
    xmlstarlet ed -O -L -s "/Project/PropertyGroup[1]" -t elem -n FileVersion -v $ASSEMBLY_SEMVER "$1"
    printf "[updated];\n"
    printf "InformationalVersion "
    xmlstarlet ed -O -L -s "/Project/PropertyGroup[1]" -t elem -n InformationalVersion -v $INFORM_VERSION "$1"
    printf "[updated];\n"
    printf "Version "
    xmlstarlet ed -O -L -s "/Project/PropertyGroup[1]" -t elem -n Version -v $SEMVER "$1"
    printf "[updated];\n\n"
  }
export -f process_projectfile

read JSON
# Validation
echo "$JSON" | jq type > /dev/null
if [[ -n "$JSON" && $? -eq 0 ]]; then
    SEMVER_VARS=(
        ASSEMBLY_SEMVER
        INFORM_VERSION
        SEMVER
    )
    ASSEMBLY_SEMVER=$(echo "$JSON" | jq -r .AssemblySemVer )
    INFORM_VERSION=$(echo "$JSON" | jq -r .InformationalVersion )
    SEMVER=$(echo "$JSON" | jq -r .SemVer )
    for name in ${SEMVER_VARS[@]}; do
        if [[ -z "${!name}" || "${!name}" == "null" ]]; then
            echo "Wrong input, field $name not set!"
            exit 1
        fi
    done
    export ASSEMBLY_SEMVER INFORM_VERSION SEMVER
    # Processing
    printf "Starting processing csproj files with:\nASSEMBLY_SEMVER=%s\nINFORM_VERSION=%s\nSEMVER=%s\n" "$ASSEMBLY_SEMVER" "$INFORM_VERSION" "$SEMVER"
    printf '=%.0s' {1..15}; echo
    find . -type f -name "*.csproj" -exec bash -c "process_projectfile \"{}\"" \;
else
    printf "Expected valid JSON as input"
    exit 1
fi
